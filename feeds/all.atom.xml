<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Krzysiek Witkowicz</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2017-08-20T21:00:00+02:00</updated><entry><title>lseek</title><link href="/posts/2017/08/20/lseek.html" rel="alternate"></link><published>2017-08-20T21:00:00+02:00</published><updated>2017-08-20T21:00:00+02:00</updated><author><name>Krzysiek Witkowicz</name></author><id>tag:None,2017-08-20:/posts/2017/08/20/lseek.html</id><summary type="html">&lt;p&gt;Czy rozmiar wszystkich plików w systemie plików może być większy niż rozmiar fizycznie zapisanych na dysku danych? Okazuje się, że
tak. A w jaki sposób uzyskać ten efekt, można przeczytać poniżej.&lt;/p&gt;
&lt;p&gt;W większości przypadków operacje we/wy na pliku wykonywane są liniowo. Niekiedy jednak potrzebujemy nieliniowego poruszania
się po pliku …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Czy rozmiar wszystkich plików w systemie plików może być większy niż rozmiar fizycznie zapisanych na dysku danych? Okazuje się, że
tak. A w jaki sposób uzyskać ten efekt, można przeczytać poniżej.&lt;/p&gt;
&lt;p&gt;W większości przypadków operacje we/wy na pliku wykonywane są liniowo. Niekiedy jednak potrzebujemy nieliniowego poruszania
się po pliku - z pomocą przychodzi funkcja &lt;code class="c"&gt;&lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; umożliwiająca ustawienie się w pliku na dowolnej pozycji:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="nf"&gt;lseek&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="n"&gt;pos&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Nie robi ona nic innego poza zmianą pozycji w pliku; w przypadku sukcesu zwraca nowe położenie w pliku, w przypadku błędu
zwraca -1 i ustawia &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt;. Zachowanie funkcji jest zależne od wartości parametru &lt;code class="c"&gt;&lt;span class="n"&gt;origin&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;SEEK_CUR&lt;/strong&gt; - nowa pozycja w pliku będzie sumą aktualnej pozycji oraz wartości parametru &lt;code class="c"&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;/code&gt;. Parametr ten może przyjmować wartości zarówno dodatnie jak i ujemne, w przypadku zera pozycja nie zostanie zmieniona&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SEEK_END&lt;/strong&gt; - nowa pozycja w pliku będzie sumą długości pliku oraz wartości parametru &lt;code class="c"&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;/code&gt;. Parametr ten możę przyjmować wartości zarówno dodatnie jak i ujemne, w przypadku zera pozycja zostanie ustawiona na końcu pliku.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SEEK_SET&lt;/strong&gt; - nowa pozycja w pliku zostanie ustawiona na wartość parametru &lt;code class="c"&gt;&lt;span class="n"&gt;pos&lt;/span&gt;&lt;/code&gt;. W przypadku zera pozycja będzie ustalona na początku pliku.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Przykładowy program kolejno: ustawia się na żądaną pozycję w pliku, przesuwa pozycję na koniec, odczytuje pozycję w pliku,
cofa się względem końca pliku i ustawia pozycję na początek pliku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argc&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
                &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Usage: test file_name&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;O_RDONLY&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_SET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lseek1&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lseek2&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_CUR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lseek3&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;pos: %ld&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_CUR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lseek4&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_SET&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lseek5&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;while&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;putchar&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buf&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $
pi@raspberrypi:~ $ gcc seek_test.c -o seek_test
pi@raspberrypi:~ $ cat file
1234567890abcdefghijklmnopqrst
pi@raspberrypi:~ $ ./seek_test file
abcdefghijklmnopqrst
pos: &lt;span class="m"&gt;31&lt;/span&gt;
rst
1234567890abcdefghijklmnopqrst
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak widać, funkcję &lt;code class="c"&gt;&lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; najczęściej wykorzystuje się do przeszukiwania pliku od początku lub końca oraz do ustalania
pozycji w pliku. Pojawia się natomiast pytanie, co stanie się, gdy przesuniemy wskaźnik poza koniec pliku?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otóż samo przeszukiwanie pliku poza jego końcem (o 1024 bajtów za daleko w powyższym przykładzie) nic nie zmienia - po prostu
próba odczytu z takiego miejsca zwróci &lt;code class="c"&gt;&lt;span class="n"&gt;EOF&lt;/span&gt;&lt;/code&gt;. Ale, jeśli w tym miejscu spróbujemy coś zapisać, stworzony zostanie nowy, wypełniony zerami
obszar danych pomiędzy poprzednią i nową długością pliku. To uzupełnienie zerami nazywane jest luką (&lt;em&gt;hole&lt;/em&gt;) i nie zajmuje fizycznie
miejsca na dysku. W związku z tym rozmiar plików w systemie plików może być większy niż rozmiar fizycznie zapisanych danych.
Takie pliki z lukami nazywane są plikami rzadkimi (&lt;em&gt;sparse files&lt;/em&gt;).&lt;/p&gt;
&lt;p&gt;Poniższy przykład pokazuje, jak przy użyciu &lt;code class="c"&gt;&lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; stworzyć plik rzadki:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/types.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="kt"&gt;off_t&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

        &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;sparse.tmp&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDWR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0777&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;open&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;lseek&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;1024&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SEEK_END&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;off_t&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;lseek&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot; &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;write&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;

        &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi: $ gcc sparse_test.c -o sparse_test
pi@raspberrypi: $ ./sparse_test
pi@raspberrypi: $ ls -l sparse.tmp
-rwxr-xr-x &lt;span class="m"&gt;1&lt;/span&gt; pi pi &lt;span class="m"&gt;1025&lt;/span&gt; lip  &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:18 sparse.tmp
pi@raspberrypi: $ du sparse.tmp
&lt;span class="m"&gt;4&lt;/span&gt;       sparse.tmp
pi@raspberrypi: $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak widać &lt;code class="bash"&gt;du&lt;/code&gt; jest 'odporne' na dziury w plikach i, w odróżnieniu od &lt;code class="bash"&gt;ls&lt;/code&gt; pokazuje fizyczny
rozmiar pliku.&lt;/p&gt;
&lt;p&gt;Oczywiście nie każdy system umożliwia stworzenie plików rzadkich. Aby to sprawdzić, możemy wykonać następujący test:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi: $ dd &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/dev/zero &lt;span class="nv"&gt;of&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/tmp/sparse.txt &lt;span class="nv"&gt;bs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;1k &lt;span class="nv"&gt;seek&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1024&lt;/span&gt; &lt;span class="nv"&gt;count&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;
&lt;span class="m"&gt;1&lt;/span&gt;+0 przeczytanych recordów
&lt;span class="m"&gt;1&lt;/span&gt;+0 zapisanych recordów
skopiowane &lt;span class="m"&gt;1024&lt;/span&gt; bajty &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;,0 kB&lt;span class="o"&gt;)&lt;/span&gt;, &lt;span class="m"&gt;0&lt;/span&gt;,00162051 s, &lt;span class="m"&gt;632&lt;/span&gt; kB/s
pi@raspberrypi: $ ls -l /tmp/sparse.txt
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; pi pi &lt;span class="m"&gt;1049600&lt;/span&gt; lip  &lt;span class="m"&gt;5&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:26 /tmp/sparse.txt
pi@raspberrypi: $ du -lh /tmp/sparse.txt
&lt;span class="m"&gt;4&lt;/span&gt;,0K      /tmp/sparse.txt
pi@raspberrypi: $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Pomijamy 1024 bloki po 1k a następnie zapisujemy 1024 bajty. W przypadku pliku rzadkiego &lt;code class="bash"&gt;du&lt;/code&gt; pokaże kilka kB, w przeciwnym
razie ponad MB.&lt;/p&gt;
&lt;p&gt;To, czy plik jest rzadki, możemy też zbadać programowo, wykorzystując funkcję &lt;code class="c"&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; - wystarczy sprawdzić, czy wielkość
pliku (&lt;code class="c"&gt;&lt;span class="n"&gt;st_size&lt;/span&gt;&lt;/code&gt;) jest większa od iloczynu liczby bloków (&lt;code class="c"&gt;&lt;span class="n"&gt;st_blocks&lt;/span&gt;&lt;/code&gt;) i rozmiaru pojedynczego bloku (&lt;code class="c"&gt;&lt;span class="n"&gt;st_blksize&lt;/span&gt;&lt;/code&gt;):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;sys/stat.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;};&lt;/span&gt;

       &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/tmp/sparse.txt&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;stat()&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_FAILURE&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="k"&gt;else&lt;/span&gt;
       &lt;span class="p"&gt;{&lt;/span&gt;
               &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file size in bytes: %ld &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;number of blocks: %ld &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_blocks&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;block size: %ld &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_blksize&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_size&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_blksize&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;st&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;st_blocks&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
                       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;file is a sparse file&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;EXIT_SUCCESS&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi: $ gcc sparse_check.c -o sparse_check
pi@raspberrypi: $ ./sparse_check
file size in bytes: &lt;span class="m"&gt;1049600&lt;/span&gt;
number of blocks: &lt;span class="m"&gt;8&lt;/span&gt;
block size: &lt;span class="m"&gt;4096&lt;/span&gt;
file is a sparse file
pi@raspberrypi: $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dużą zaletą plików rzadkich jest to, iż oszczędzają one miejsce na dysku. Powierzchnia dyskowa jest alokowana tylko wtedy,
gdy jest potrzebna. Pozwalają one również skrócić czas potrzebny na założenie pliku - system nie musi alokować 'miejsca na zera'.
Stąd pliki te są używane np. przy tworzeniu migawek baz danych, plików z logami, czy też obrazów dysków. Spotkać się można
z nimi choćby korzystając z maszyny wirtualnej: w poniższym przypadku obraz systemu liczy 100GB, ale sam plik zajmuje fizycznie kilka gigabajtów&lt;/p&gt;
&lt;img alt="" src="/images/virtual_box.jpg" /&gt;
&lt;img alt="" src="/images/fs.jpg" /&gt;
&lt;p&gt;Sparse files nie są jedynie domeną systemów UN*X. W systemie NTFS pliki tego typu możemy utworzyć komendą &lt;code class="bash"&gt;fsutil&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;c:&lt;span class="se"&gt;\d&lt;/span&gt;ev&amp;gt;fsutil File CreateNew temp 0x100000
File c:&lt;span class="se"&gt;\d&lt;/span&gt;ev&lt;span class="se"&gt;\t&lt;/span&gt;emp is created

c:&lt;span class="se"&gt;\d&lt;/span&gt;ev&amp;gt;fsutil Sparse SetFlag temp

c:&lt;span class="se"&gt;\d&lt;/span&gt;ev&amp;gt;fsutil Sparse SetRange temp &lt;span class="m"&gt;0&lt;/span&gt; 0x100000
&lt;/pre&gt;&lt;/div&gt;
&lt;img alt="" src="/images/win_sparse.jpg" /&gt;
&lt;p&gt;Oczywiście WinApi również udostępnia odpowiednie metody (kod &lt;code class="c"&gt;&lt;span class="n"&gt;FSCTL_SET_SPARSE&lt;/span&gt;&lt;/code&gt; dla funkcji &lt;code class="c"&gt;&lt;span class="n"&gt;DeviceIoControl&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;),
ale to już temat na oddzielną notkę.&lt;/p&gt;
</content><category term="programowanie"></category><category term="c"></category><category term="linux"></category><category term="kernel"></category></entry><entry><title>O problemach z errno słów kilka</title><link href="/posts/2017/06/07/errno.html" rel="alternate"></link><published>2017-06-07T21:00:00+02:00</published><updated>2017-06-07T21:00:00+02:00</updated><author><name>Krzysiek Witkowicz</name></author><id>tag:None,2017-06-07:/posts/2017/06/07/errno.html</id><summary type="html">&lt;div class="section" id="w-ramach-przypomnienia"&gt;
&lt;h2&gt;W ramach przypomnienia&lt;/h2&gt;
&lt;p&gt;Błąd jest sygnalizowany poprzez zwracaną wartość funkcji oraz opisywany poprzez zmienną
globalną &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt;. Informację o błędzie funkcje przekazują odpowiednią wartością kodu powrotu (zazwyczaj -1, lub,
dla funkcji zwracających wskaźnik, wartością NULL), natomiast wartość ta nie dostarcza żadnych informacji na temat przyczyn
jej wystąpienia. W tym celu należy …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="w-ramach-przypomnienia"&gt;
&lt;h2&gt;W ramach przypomnienia&lt;/h2&gt;
&lt;p&gt;Błąd jest sygnalizowany poprzez zwracaną wartość funkcji oraz opisywany poprzez zmienną
globalną &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt;. Informację o błędzie funkcje przekazują odpowiednią wartością kodu powrotu (zazwyczaj -1, lub,
dla funkcji zwracających wskaźnik, wartością NULL), natomiast wartość ta nie dostarcza żadnych informacji na temat przyczyn
jej wystąpienia. W tym celu należy skorzystać ze zmiennej &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-1"&gt;
&lt;h2&gt;Problem 1&lt;/h2&gt;
&lt;p&gt;Mało kto pamięta, że wartość zmiennej errno może zmodyfikować dowolne wywołanie funkcji bibliotecznej lub systemowej.
Rozważmy taki oto lekko idiotyczny, i, co ważniejsze, &lt;strong&gt;błędny&lt;/strong&gt;, fragment kodu, którego celem jest wyłapanie nieprawidłowego
deskryptora pliku.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;extern&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;argc&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;argv&lt;/span&gt;&lt;span class="p"&gt;[])&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="cm"&gt;/* fake file descriptor */&lt;/span&gt;
        &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;log_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;my.log&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_CREAT&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;O_WRONLY&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S_IRUSR&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;S_IWUSR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

        &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Problem with close!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;19&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;EBADF&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                        &lt;span class="n"&gt;fprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Bad file descriptor!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;close&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="p"&gt;}&lt;/span&gt;
                &lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_fd&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
        &lt;span class="p"&gt;}&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po skompilowaniu i uruchomieniu powinniśmy, zgodnie z oczekiwaniami, dowiedzieć się o niewłaściwym deskryptorze pliku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~/c/err $ ./test1
Bad file descriptor!
pi@raspberrypi:~/c/err $ tail my.log
Problem with close!
pi@raspberrypi:~/c/err $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dlaczego więc ten program jest błędny? Aby to sprawdzić, spróbujmy lekko go zmodyfikować, wywołując błąd w funkcji &lt;code class="c"&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;log_fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Problem with close!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tym razem informacja o błędzie jest inna:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~/c/err $ ./test2
close: Bad address
pi@raspberrypi:~/c/err $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Co się stało? Otóż funkcja &lt;code class="c"&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;/code&gt; otrzymawszy błędną wartość parametru count, ustawiła &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt; na wartość EFAULT.
My tymczasem cały czas zakładamy, że &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt; zostało ustawione przez funkcję &lt;code class="c"&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;/code&gt;.
Jak uniknąć takiego błędu? Należy zachować wartość &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt; pomiędzy wywołaniami funkcji:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#include&amp;lt;stdio.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include&amp;lt;unistd.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include&amp;lt;errno.h&amp;gt;&lt;/span&gt;
&lt;span class="c1"&gt;#include&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;

extern int errno&lt;span class="p"&gt;;&lt;/span&gt;
FILE * f&lt;span class="p"&gt;;&lt;/span&gt;

int main&lt;span class="o"&gt;(&lt;/span&gt;int argc, char * argv&lt;span class="o"&gt;[])&lt;/span&gt;
&lt;span class="o"&gt;{&lt;/span&gt;
       int &lt;span class="nv"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -3&lt;span class="p"&gt;;&lt;/span&gt; /* fake file descriptor */
       int &lt;span class="nv"&gt;log_fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; open&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;my.log&amp;quot;&lt;/span&gt;, O_CREAT&lt;span class="p"&gt;|&lt;/span&gt;O_WRONLY, S_IRUSR&lt;span class="p"&gt;|&lt;/span&gt;S_IWUSR&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

       &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="o"&gt;(&lt;/span&gt;close&lt;span class="o"&gt;(&lt;/span&gt;fd&lt;span class="o"&gt;)&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; -1&lt;span class="o"&gt;){&lt;/span&gt;
               const int &lt;span class="nv"&gt;err&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; errno&lt;span class="p"&gt;;&lt;/span&gt;
               write&lt;span class="o"&gt;(&lt;/span&gt;log_fd,&lt;span class="s2"&gt;&amp;quot;Problem with close\n&amp;quot;&lt;/span&gt;,-20&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;err&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; EBADF&lt;span class="o"&gt;){&lt;/span&gt;
                       fprintf&lt;span class="o"&gt;(&lt;/span&gt;stderr, &lt;span class="s2"&gt;&amp;quot;Bad file descriptor!\n&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="o"&gt;}&lt;/span&gt;
               &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="o"&gt;{&lt;/span&gt;
                       perror&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;close&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
               &lt;span class="o"&gt;}&lt;/span&gt;
               close&lt;span class="o"&gt;(&lt;/span&gt;log_fd&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="o"&gt;}&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="o"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Tym razem, po skompilowaniu i uruchomieniu programu, dowiadujemy się o problemie z deskryptorem pliku:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~/c/err $ ./test3
Bad file descriptor!
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Błędy tego typu nie są powszechne, ale kiedy się już zdarzą, znalezienie ich przyczyny potrafi kosztować sporo wysiłku.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="problem-2"&gt;
&lt;h2&gt;Problem 2&lt;/h2&gt;
&lt;p&gt;Czy poniższy kod jest poprawny?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strtol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Otóż nie, gdyż istnieją funkcje (jak powyższa), dla których cały zakres zwracanych wartości jest poprawny. W takiej sytuacji należy pamiętać o
wyzerowaniu zmiennej &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt; przed zawołaniem funkcji, a po jej użyciu, ponownym sprawdzeniu &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;arg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strtol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Skoro już jesteśmy przy &lt;code class="c"&gt;&lt;span class="n"&gt;strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;nptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;endptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;base&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;, można wspomnieć o jeszcze jej jednej, ciekawej właściwości.
Mianiowicie funkcja ta ustawia &lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt; jedynie w sytuacji przepełnienia (na kod &lt;strong&gt;ERANGE&lt;/strong&gt;). Natomiast by stwierdzić błąd parsowania
przekazanego napisu, należy sprawdzić wskaźnik &lt;code class="c"&gt;&lt;span class="n"&gt;endptr&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;errno&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strtol&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;strtol&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;No conversion&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt; &lt;span class="nf"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ptr&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="sc"&gt;&amp;#39;\0&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The whole string has been converted&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="k"&gt;else&lt;/span&gt;
       &lt;span class="nf"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Ptr point to unconverted rest of the string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak łatwo można się przekonać, dla&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;foobar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;otrzymamy komunikat &lt;strong&gt;&amp;quot;No conversion&amp;quot;&lt;/strong&gt;. Dla:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;111fobar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;wynikiem będzie komunikat &lt;strong&gt;&amp;quot;Ptr point to unconverted rest of the string&amp;quot;&lt;/strong&gt;. Natomiast gdy będziemy chcieli sparsować zbyt
dużą wartość:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;9999999999999999&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class="c"&gt;&lt;span class="n"&gt;errno&lt;/span&gt;&lt;/code&gt; zostanie ustawione na &lt;strong&gt;ERANGE&lt;/strong&gt; o czym program nas poinformuje komunikatem &lt;strong&gt;&amp;quot;strtol: Numerical result out of range&amp;quot;&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
</content><category term="programowanie"></category><category term="c"></category><category term="linux"></category><category term="kernel"></category></entry><entry><title>Raspberry Pi: moduły jądra - część 3</title><link href="/posts/2017/03/14/rpi-lkm-part-3.html" rel="alternate"></link><published>2017-03-14T22:00:00+01:00</published><updated>2017-03-14T22:00:00+01:00</updated><author><name>Krzysiek Witkowicz</name></author><id>tag:None,2017-03-14:/posts/2017/03/14/rpi-lkm-part-3.html</id><summary type="html">&lt;p&gt;Sterowniki do urządzeń znakowych są bardzo popularnym rodzajem modułów. Swoją karierę zawdzięczają zarówno
prostej do zrozumienia i zaimplementowania zasadzie działania jak i dużej uniwersalności. Umożliwiając bezpośredni
transfer danych z oraz do przestrzeni użytkownika zachowują się analogicznie do zwykłych plików, zapewniając zapis,
odczyt oraz przeszukiwanie. Spróbujmy więc przygotować sterownik urządzenia &lt;code class="bash"&gt;&lt;span class="se"&gt;\d …&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;</summary><content type="html">&lt;p&gt;Sterowniki do urządzeń znakowych są bardzo popularnym rodzajem modułów. Swoją karierę zawdzięczają zarówno
prostej do zrozumienia i zaimplementowania zasadzie działania jak i dużej uniwersalności. Umożliwiając bezpośredni
transfer danych z oraz do przestrzeni użytkownika zachowują się analogicznie do zwykłych plików, zapewniając zapis,
odczyt oraz przeszukiwanie. Spróbujmy więc przygotować sterownik urządzenia &lt;code class="bash"&gt;&lt;span class="se"&gt;\d&lt;/span&gt;ev&lt;span class="se"&gt;\m&lt;/span&gt;ychar&lt;/code&gt;, który posłuży nam do
komunikacji pomiędzy modułem jądra a programem z przestrzeni użytkownika.&lt;/p&gt;
&lt;div class="section" id="dostep-do-urzadzen-znakowych"&gt;
&lt;h2&gt;Dostęp do urządzeń znakowych&lt;/h2&gt;
&lt;p&gt;Jak przed chwilą wspomniałem, dostęp do urządzeń znakowych odbywa się poprzez specjalne pliki, zazwyczaj zlokalizowane
w katalogu &lt;code class="bash"&gt;/dev&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ ls -l /dev
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
crw-rw-rw- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;5&lt;/span&gt;,   &lt;span class="m"&gt;0&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty
crw--w---- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;4&lt;/span&gt;,   &lt;span class="m"&gt;0&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty0
crw------- &lt;span class="m"&gt;1&lt;/span&gt; pi   tty     &lt;span class="m"&gt;4&lt;/span&gt;,   &lt;span class="m"&gt;1&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty1
crw--w---- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;4&lt;/span&gt;,  &lt;span class="m"&gt;10&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty10
crw--w---- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;4&lt;/span&gt;,  &lt;span class="m"&gt;11&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty11
crw--w---- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;4&lt;/span&gt;,  &lt;span class="m"&gt;12&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty12
crw--w---- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;4&lt;/span&gt;,  &lt;span class="m"&gt;13&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty13
crw--w---- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;4&lt;/span&gt;,  &lt;span class="m"&gt;14&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty14
crw--w---- &lt;span class="m"&gt;1&lt;/span&gt; root tty     &lt;span class="m"&gt;4&lt;/span&gt;,  &lt;span class="m"&gt;15&lt;/span&gt; lut &lt;span class="m"&gt;28&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt;:02 tty15
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Rzucają się w oczy 2 różnice pomiędzy 'standardowym' widokiem z ls (np. z katalogu domowego) a obecnym:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;nie spotykany gdzie indziej znak &lt;strong&gt;c&lt;/strong&gt; w pierwszej kolumnie oznaczający &lt;em&gt;character device&lt;/em&gt; (jest jeszcze &lt;strong&gt;b&lt;/strong&gt; dla &lt;em&gt;block device&lt;/em&gt;)&lt;/li&gt;
&lt;li&gt;dwie oddzielone przecinkiem liczby całkowite&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Liczby te to powiązane z plikiem specjalnym dwie wartości: &lt;em&gt;major number&lt;/em&gt; (numer główny urządzenia)
oraz &lt;em&gt;minor number&lt;/em&gt; (numer podrzędny urządzenia). Pierwsza wartość identyfikuje sterownik powiązany z urządzeniem, druga
jest zależna od danego urządzenia i może np. służyć do identyfikacji konkretnego urządzenia fizycznego w sytuacji, gdy
sterownik obsługuje ich kilka.&lt;/p&gt;
&lt;p&gt;Jedną z pierwszych rzeczy, jakie musimy zrobić chcąc skorzystać z naszego sterownika, jest zarejestrowanie go w jądrze.
Sprowadza się to do przypisania modułowi &lt;em&gt;major number&lt;/em&gt; podczas jego inicjalizacji. Do zarejestrowania oraz wyrejestrowania
sterownika służą zadeklarowane w &lt;code class="c"&gt;&lt;span class="n"&gt;linux&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;&lt;/code&gt; funkcje:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;register_chrdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file_operations&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fops&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;unregister_chrdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;gdzie:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;major&lt;/strong&gt; to wskazany przez nas numer główny. Oczywiście pojawia się pytanie, jak uniknąć konfliktu z istniejącym już być może numerem. Można oczywiście zajrzeć do dokumentacji, ale o wiele lepiej jest skorzystać z dynamicznego przydzielana numeru. Otóż po przekazaniu do funkcji parametru &lt;code class="c"&gt;&lt;span class="n"&gt;major&lt;/span&gt;&lt;/code&gt; równego 0, jądro &lt;em&gt;major number&lt;/em&gt; zaalokkuje dynamicznie, co w naszym sterowniku jest rozwiązaniem wystarczającym.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; to nazwa urządzenia. Zarówno nazwę jak i numer główny dla zerejestrowanych modułów można zobaczyć w pliku &lt;code class="bash"&gt;/proc/devices&lt;/code&gt;:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ head /proc/devices
Character devices:
  &lt;span class="m"&gt;1&lt;/span&gt; mem
  &lt;span class="m"&gt;4&lt;/span&gt; /dev/vc/0
  &lt;span class="m"&gt;4&lt;/span&gt; tty
  &lt;span class="m"&gt;5&lt;/span&gt; /dev/tty
  &lt;span class="m"&gt;5&lt;/span&gt; /dev/console
  &lt;span class="m"&gt;5&lt;/span&gt; /dev/ptmx
  &lt;span class="m"&gt;5&lt;/span&gt; ttyprintk
  &lt;span class="m"&gt;7&lt;/span&gt; vcs
 &lt;span class="m"&gt;10&lt;/span&gt; misc
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;fops&lt;/strong&gt; to wskaźnik na strukturę &lt;code class="c"&gt;&lt;span class="n"&gt;file_operations&lt;/span&gt;&lt;/code&gt; zawierającą wskaźniki na funkcje mogące wykonywać operacje na naszym urządzeniu.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Wskaźniki zawarte w &lt;code class="c"&gt;&lt;span class="n"&gt;file_operations&lt;/span&gt;&lt;/code&gt; wskazują na funkcje, którymi definiujemy poszczególne operacje na plikach, jakie
będzie wykonywał nasz sterownik. Na nasze potrzeby zaimplementujemy &lt;code class="c"&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;/code&gt;, &lt;code class="c"&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;/code&gt;, &lt;code class="c"&gt;&lt;span class="n"&gt;open&lt;/span&gt;&lt;/code&gt;, &lt;code class="c"&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;/code&gt;, natomiast
możliwości jest dużo więcej, drobny fragment struktury może wyglądać tak&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;flush&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fl_owner_t&lt;/span&gt; &lt;span class="n"&gt;id&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;             &lt;span class="c1"&gt;// called when a process closes its copy of the descriptor&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;inode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;          &lt;span class="c1"&gt;// called when a file structure is being released&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fsync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loff_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loff_t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;datasync&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;  &lt;span class="c1"&gt;// notify device of change in its FASYNC flag&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;aio_fsync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;kiocb&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;datasync&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;         &lt;span class="c1"&gt;// synchronous notify device of change in its FASYNC flag&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fasync&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;                 &lt;span class="c1"&gt;// asynchronous notify device of change in its FASYNC flag&lt;/span&gt;
&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file_lock&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;    &lt;span class="c1"&gt;// used to implement file locking&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Oczywiście nie ma potrzeby implementować wszystkich tych funkcji. Brak implementacji sprawi, że wskaźniki będą zwyczajnie
wskazywać na &lt;code class="c"&gt;&lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;/code&gt;, a dane operacje nie będą dostępne:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file_operations&lt;/span&gt; &lt;span class="n"&gt;fo&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
       &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;open&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mychar_dev_open&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mychar_dev_read&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mychar_dev_write&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
       &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mychar_dev_release&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;};&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Aby móc skorzystać z naszego urządzenia, musimy utworzyć plik specjalny &lt;code class="bash"&gt;&lt;span class="se"&gt;\d&lt;/span&gt;ev&lt;span class="se"&gt;\m&lt;/span&gt;ychar&lt;/code&gt;. Można wykorzystać do tego celu
polecenie &lt;code class="bash"&gt;mknod&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;#mknod /dev/&amp;lt;driver_interface_name&amp;gt; c &amp;lt;major number&amp;gt; &amp;lt;minor number&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;dużo wygodniej jednak będzie skorzystać z funkcji udostępnionych przez jądro.&lt;/p&gt;
&lt;p&gt;Zaczynamy od stworzenia struktury &lt;code class="c"&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;/code&gt;, będącej pewnego rodzaju abstrakcją nad implementacją sterownika. Można powiedzieć,
że klasy grupują urządzenia pod kątem tego, do czego służą a nie pod kątem ich fizycznego sposobu działania czy budowy&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;class_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;module&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;owner&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;owner&lt;/strong&gt; - wskaźnik na moduł do którego należy dana klasa&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; - wkaźnik na łańcuch znaków z nazwą klasy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;W naszym przypadku będzie to klasa &lt;code class="c"&gt;&lt;span class="n"&gt;mychar_class&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mychar_dev_class&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;class_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;THIS_MODULE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar_class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IS_ERR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mychar_dev_class&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                 &lt;span class="n"&gt;unregister_chrdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;major_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MY_DEVICE_NAME&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_ALERT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar_dev: fail while register device class&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;PTR_ERR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mychar_dev_class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po załadowaniu modułu, w katalaogu &lt;code class="bash"&gt;/sys/class&lt;/code&gt; można sprawdzić, że klasa rzeczywiście została utworzona:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo ls -l /sys/class/mychar_class
razem &lt;span class="m"&gt;0&lt;/span&gt;
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;0&lt;/span&gt; mar  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:43 mychar -&amp;gt; ../../devices/virtual/mychar_class/mychar
pi@raspberrypi:~ $ sudo ls -l /sys/devices/virtual/mychar_class/mychar/
razem &lt;span class="m"&gt;0&lt;/span&gt;
-r--r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;4096&lt;/span&gt; mar  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:44 dev
drwxr-xr-x &lt;span class="m"&gt;2&lt;/span&gt; root root    &lt;span class="m"&gt;0&lt;/span&gt; mar  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:44 power
lrwxrwxrwx &lt;span class="m"&gt;1&lt;/span&gt; root root    &lt;span class="m"&gt;0&lt;/span&gt; mar  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:44 subsystem -&amp;gt; ../../../../class/mychar_class
-rw-r--r-- &lt;span class="m"&gt;1&lt;/span&gt; root root &lt;span class="m"&gt;4096&lt;/span&gt; mar  &lt;span class="m"&gt;8&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:41 uevent
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do usunięcia natomiast wcześniej stworzonej klasy służy funkcja:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;class_destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Teraz możemy powołać do życia urządzenie i zarejestrować je w SysFS:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="nf"&gt;device_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;cls&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;device&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;parent&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;dev_t&lt;/span&gt; &lt;span class="n"&gt;devt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;drvdata&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                            &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;fmt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;...);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;cls&lt;/strong&gt; - wskaźnik na klasę, z którą będzie skojarzone urządzenie&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;parent&lt;/strong&gt; - wskaźnik na urządzenie nadrzędne (o ile istnieje)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;devt&lt;/strong&gt; - reprezentacja głównego oraz podrzędnego numeru urządzenia&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;drvdata&lt;/strong&gt; - dane na potrzeby wywołań zwrotnych, np. używanych przez jądro podczas komunikacji z udziałem SysFS&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;fmt&lt;/strong&gt; - nazwa urządzenia&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Poniższy fragment kodu tworzy plik urządzenia &lt;code class="bash"&gt;/dev/mychar&lt;/code&gt;. Nie trzeba wołać z przestrzeni użytkownika polecenia
&lt;code class="bash"&gt;mknod&lt;/code&gt; - wszystko dzieje się w przestrzeni jądra.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mychar_dev&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;device_create&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mychar_dev_class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MKDEV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;major_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="nb"&gt;NULL&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IS_ERR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mychar_dev&lt;/span&gt;&lt;span class="p"&gt;)){&lt;/span&gt;
                 &lt;span class="n"&gt;class_destroy&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mychar_dev_class&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;unregister_chrdev&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;major_number&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_ALERT&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Failed to create the device&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nf"&gt;PTR_ERR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mychar_dev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Makro &lt;code class="c"&gt;&lt;span class="n"&gt;MKDEV&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;major&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;minor&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; zamienia numery główny i podrzędny na typ &lt;code class="c"&gt;&lt;span class="kt"&gt;dev_t&lt;/span&gt;&lt;/code&gt; - 32 bity bez znaku. W drugą stronę
natomiast można skorzystać z makr:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;MAJOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dev_t&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MINOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;dev_t&lt;/span&gt; &lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Po załadowaniu sterownika można sprawdzić, że nowe urządzenie rzeczywiście zostało wykreowane:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo grep mychar /proc/devices
&lt;span class="m"&gt;243&lt;/span&gt; mychar
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do usunięcia urządzenia służy funkcja:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="nf"&gt;device_destroy&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;class&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;dev_t&lt;/span&gt; &lt;span class="n"&gt;devt&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następnie zaimplementujemy funkcje wskazywane przez &lt;code class="c"&gt;&lt;span class="n"&gt;file_operations&lt;/span&gt;&lt;/code&gt;. Na początek funkcja wykonywana za każdym razem,
gdy urządzenie jest otwierane przez program z przestrzeni użytkownika:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;mychar_dev_open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;inode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar_dev: device opened&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;inode&lt;/strong&gt; - wskaźnik na i-węzeł&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;file&lt;/strong&gt; - wskaźnik na plik&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Jak widać funkcja nie implementuje większej logiki, zrzuca jedynie do logu informację o otworzeniu pliku. W analogiczny
sposób napiszemy funkcję wykonywaną przy zamknięciu/zwolnieniu urządzenia:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;mychar_dev_release&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;inode&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;inode&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;file&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar_dev: device closed&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Następnie zaimplementujemy funkcję wykonywaną podczas odczytu danych z urządzenia, np. gdy dane są wysyłane do przestrzeni użytkownika:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;ssize_t&lt;/span&gt; &lt;span class="nf"&gt;mychar_dev_read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;filep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;buff_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loff_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;copy_to_user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;msg_length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;if&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
                 &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar_dev: %d bytes send to client&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg_length&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
         &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;
                 &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_ALERT&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar_dev: failed while send data&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                 &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;EFAULT&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
         &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;filep&lt;/strong&gt; - wskaźnik na plik&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;buff&lt;/strong&gt; - wskaźnik na bufor do którego funkcja zapisze dane&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;buff_len&lt;/strong&gt; - długość bufora&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt; - offset (o ile jest wymagany)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Sercem powyższego fragmentu kodujest wywołanie funkcji kopiującej dane z przestrzeni jądra do przestrzeni użytkownika:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="nf"&gt;copy_to_user&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;__user&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;to&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;from&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;unsigned&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;to&lt;/strong&gt; - wskaźnik na adres docelowy, w przestrzeni użytkownika&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;from&lt;/strong&gt; - wskaźnik na adres źródłowy, w przestrzeni jądra&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;n&lt;/strong&gt; - ilość bajtów do skopiowania&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Funkcja &lt;code class="c"&gt;&lt;span class="n"&gt;copy_to_user&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; zwraca ilość nieskopiowanych bajtów lub, w razie powodzenia, zero. Jej wywołanie jest niezbędne,
bezpośrednia próba skopiowania danych z przestrzeni jądra do przestrzeni użytkownika zakończyłaby się błędem naruszenia
ochrony pamięci.&lt;/p&gt;
&lt;p&gt;Na koniec zaimplementujemy funkcję wykonywaną podczas zapisu do urządzenia z przestrzeni użytkownika.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;ssize_t&lt;/span&gt; &lt;span class="nf"&gt;mychar_dev_write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;struct&lt;/span&gt; &lt;span class="n"&gt;file&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;filep&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="k"&gt;const&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;size_t&lt;/span&gt; &lt;span class="n"&gt;buff_len&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;loff_t&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;offset&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
         &lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;%s&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;buff&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="n"&gt;msg_length&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;mychar_dev: Received %Iu characters from client&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;msg_length&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
         &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;buff_len&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;W kontekście wcześniejszych opisów jest raczej samowyjaśniająca się. Dobrze znaną funkcją &lt;code class="c"&gt;&lt;span class="n"&gt;sprintf&lt;/span&gt;&lt;/code&gt; kopiujemy dane
z przestrzeni użytkownika do zmiennej &lt;code class="c"&gt;&lt;span class="n"&gt;msg&lt;/span&gt;&lt;/code&gt; zadeklarowanej w przestrzeni jądra i zrzucamy je do logu.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="klient"&gt;
&lt;h2&gt;Klient&lt;/h2&gt;
&lt;p&gt;Moduł jest zbudowany i załadowany do pamięci, natomiast nie mamy jeszcze możliwości komunikacji z nim.
Przygotujmy więc program, który pobierze od użytkownika ciąg znaków, zapisze do naszego urządzenia &lt;code class="bash"&gt;/dev/mychar&lt;/code&gt; i po
kilku sekundach odczyta i wypisze odpowiedź:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;stdlib.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;errno.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;fcntl.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;string.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt;&lt;span class="cpf"&gt;&amp;lt;unistd.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="cp"&gt;#define MAX_BUFFER_LEN 255&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_BUFFER_LEN&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;

&lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt;
       &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;ret&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;MAX_BUFFER_LEN&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Opening character device&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;/dev/mychar&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;O_RDWR&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to open the device.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Type text to send to kernel:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;scanf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;%[^&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;]%*c&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Writing message to the device [%s].&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strlen&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;buffer&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to write the message to the device.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="n"&gt;sleep&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Wait 5 seconds for reading back from the device.&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Reading from the device...&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fd&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;MAX_BUFFER_LEN&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ret&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;){&lt;/span&gt;
               &lt;span class="n"&gt;perror&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Failed to read the message from the device.&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
               &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;errno&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
       &lt;span class="p"&gt;}&lt;/span&gt;
       &lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;The read message is: [%s]&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;receive&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
       &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Powyższe rozwiązanie działa:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo ./char_device_client
Opening character device
Type text to send to kernel:
Some important data
Writing message to the device &lt;span class="o"&gt;[&lt;/span&gt;Some important data&lt;span class="o"&gt;]&lt;/span&gt;.
Wait &lt;span class="m"&gt;5&lt;/span&gt; seconds &lt;span class="k"&gt;for&lt;/span&gt; reading back from the device.
Reading from the device...
The &lt;span class="nb"&gt;read&lt;/span&gt; message is: &lt;span class="o"&gt;[&lt;/span&gt;My message is:&lt;span class="o"&gt;[&lt;/span&gt;Some important data&lt;span class="o"&gt;]]&lt;/span&gt;
pi@raspberrypi:~ $ tail -4 /var/log/kern.log
Mar &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:23:50 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;4901&lt;/span&gt;.801790&lt;span class="o"&gt;]&lt;/span&gt; mychar_dev: device opened
Mar &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:23:58 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;4909&lt;/span&gt;.836530&lt;span class="o"&gt;]&lt;/span&gt; mychar_dev: Received &lt;span class="m"&gt;19&lt;/span&gt; characters from client
Mar &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:24:03 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;4914&lt;/span&gt;.836803&lt;span class="o"&gt;]&lt;/span&gt; mychar_dev: &lt;span class="m"&gt;35&lt;/span&gt; bytes send to client
Mar &lt;span class="m"&gt;14&lt;/span&gt; &lt;span class="m"&gt;21&lt;/span&gt;:24:03 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;4914&lt;/span&gt;.837362&lt;span class="o"&gt;]&lt;/span&gt; mychar_dev: device closed
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;aczkolwiek z pewnymi zastrzeżeniami: wymaga uprawnień roota oraz nie jest odporne na problemy związane ze współbieżnością.
Ale o tym w następnym &lt;a class="reference external" href="/posts/2017/08/20/lseek.html"&gt;odcinku&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programowanie"></category><category term="c"></category><category term="raspberry pi"></category><category term="kernel"></category></entry><entry><title>Email w pythonie</title><link href="/posts/2017/03/01/email-python.html" rel="alternate"></link><published>2017-03-01T22:00:00+01:00</published><updated>2017-03-01T22:00:00+01:00</updated><author><name>Krzysiek Witkowicz</name></author><id>tag:None,2017-03-01:/posts/2017/03/01/email-python.html</id><summary type="html">&lt;p&gt;Email jest jedną z popularniejszych form komunikacji, a Python dostarcza w bibliotece standardowej szereg rozwiązań
umożliwiających łatwą pracę z pocztą elektroniczną. Na przykładzie gmaila postaram się pokazać, jak napisać, wysłać i
odebrać wiadomość email.&lt;/p&gt;
&lt;div class="section" id="smtp"&gt;
&lt;h2&gt;SMTP&lt;/h2&gt;
&lt;p&gt;SMTP czyli Simple Mail Transfer Protocol jest standardowym protokołem transmisji poczty w internecie. Choć serwery …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;Email jest jedną z popularniejszych form komunikacji, a Python dostarcza w bibliotece standardowej szereg rozwiązań
umożliwiających łatwą pracę z pocztą elektroniczną. Na przykładzie gmaila postaram się pokazać, jak napisać, wysłać i
odebrać wiadomość email.&lt;/p&gt;
&lt;div class="section" id="smtp"&gt;
&lt;h2&gt;SMTP&lt;/h2&gt;
&lt;p&gt;SMTP czyli Simple Mail Transfer Protocol jest standardowym protokołem transmisji poczty w internecie. Choć serwery pocztowe
wykorzystują go zarówno do wysyłania, jak i odbierania wiadomości, aplikacje klienckie korzystają z SMTP do wysyłania
emaili.
Poniższy program pokazuje próbę prostej komunikacji z serwerem poczty wychodzącej:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt;

&lt;span class="n"&gt;SMTP_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;gmail-smtp-in.l.google.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SMTP_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;25&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter &amp;#39;To&amp;#39; email adress: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FROM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter &amp;#39;From&amp;#39; email address: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter subject of your email: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;message_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter your message: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message_part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;session&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SMTP_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SMTP_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FROM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
    &lt;span class="n"&gt;session&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTPHeloError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server didn&amp;#39;t reply properly to helo&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTPRecipientsRefused&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server rejected recipients&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTPSenderRefused&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Server didn&amp;#39;t accept From address&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTPDataError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Unexpected error&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTPServerDisconnected&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Connection closed&amp;quot;&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;ex&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Próba uruchomienia kończy się, niestety, porażką:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enter &lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt; email adress: username@gmail.com
Enter &lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt; email address: username@gmail.com
Enter subject of your email: Test
Enter your message: Hello World!
Connection closed
Connection unexpectedly closed

Process finished with &lt;span class="nb"&gt;exit&lt;/span&gt; code &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Do znalezienia błędu wykorzystamy metodę &lt;code class="pyth python"&gt;&lt;span class="n"&gt;set_debug_level&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; jaką udostępnia nam klasa &lt;code class="pyth python"&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;/code&gt;.
Pozwoli ona podejrzeć wszystkie informacje, zarówno wysyłane do serwera jak i od niego otrzymane:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Enter &lt;span class="s1"&gt;&amp;#39;To&amp;#39;&lt;/span&gt; email adress: username@gmail.com
Enter &lt;span class="s1"&gt;&amp;#39;From&amp;#39;&lt;/span&gt; email address: username@gmail.com
Enter subject of your email: Test
Enter your message: Hello World!
send: &lt;span class="s1"&gt;&amp;#39;ehlo [192.168.56.1]\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250-mx.google.com at your service, [46.215.215.74]\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250-SIZE 157286400\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250-8BITMIME\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250-STARTTLS\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250-ENHANCEDSTATUSCODES\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250-PIPELINING\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250 SMTPUTF8\r\n&amp;#39;&lt;/span&gt;
reply: retcode &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; Msg: mx.google.com at your service, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;.215.215.74&lt;span class="o"&gt;]&lt;/span&gt;
SIZE &lt;span class="m"&gt;157286400&lt;/span&gt;
8BITMIME
STARTTLS
ENHANCEDSTATUSCODES
PIPELINING
SMTPUTF8
send: &lt;span class="s1"&gt;&amp;#39;mail FROM:&amp;lt;username@gmail.com&amp;gt; size=340\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250 2.1.0 OK 88si2341819lfx.293 - gsmtp\r\n&amp;#39;&lt;/span&gt;
reply: retcode &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; Msg: &lt;span class="m"&gt;2&lt;/span&gt;.1.0 OK 88si2341819lfx.293 - gsmtp
send: &lt;span class="s1"&gt;&amp;#39;rcpt TO:&amp;lt;username@gmail.com&amp;gt;\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;250 2.1.5 OK 88si2341819lfx.293 - gsmtp\r\n&amp;#39;&lt;/span&gt;
reply: retcode &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;250&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; Msg: &lt;span class="m"&gt;2&lt;/span&gt;.1.5 OK 88si2341819lfx.293 - gsmtp
send: &lt;span class="s1"&gt;&amp;#39;data\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;354  Go ahead 88si2341819lfx.293 - gsmtp\r\n&amp;#39;&lt;/span&gt;
reply: retcode &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;354&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; Msg: Go ahead 88si2341819lfx.293 - gsmtp
data: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;354&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Go ahead 88si2341819lfx.293 - gsmtp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
send: &lt;span class="s1"&gt;&amp;#39;Content-Type: multipart/mixed; boundary=&amp;quot;===============1757486702==&amp;quot;\r\nMIME-Version: 1.0\r\nTO: username@gmail.com\r\nFROM: username@gmail.com\r\nSubject: Test\r\n\r\n--===============1757486702==\r\nContent-Type: text/plain; charset=&amp;quot;us-ascii&amp;quot;\r\nMIME-Version: 1.0\r\nContent-Transfer-Encoding: 7bit\r\n\r\nHello World!\r\n--===============1757486702==--\r\n.\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;421-4.7.0 [46.215.215.74      15] Our system has detected that this message is\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;421-4.7.0 suspicious due to the very low reputation of the sending IP address.\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;421-4.7.0 To protect our users from spam, mail sent from your IP address has\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;421-4.7.0 been temporarily rate limited. Please visit\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;421 4.7.0  https://support.google.com/mail/answer/188131 for more information. 88si2341819lfx.293 - gsmtp\r\n&amp;#39;&lt;/span&gt;
reply: retcode &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;421&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; Msg: &lt;span class="m"&gt;4&lt;/span&gt;.7.0 &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;46&lt;/span&gt;.215.215.74      &lt;span class="m"&gt;15&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Our system has detected that this message is
&lt;span class="m"&gt;4&lt;/span&gt;.7.0 suspicious due to the very low reputation of the sending IP address.
&lt;span class="m"&gt;4&lt;/span&gt;.7.0 To protect our users from spam, mail sent from your IP address has
&lt;span class="m"&gt;4&lt;/span&gt;.7.0 been temporarily rate limited. Please visit
&lt;span class="m"&gt;4&lt;/span&gt;.7.0  https://support.google.com/mail/answer/188131 &lt;span class="k"&gt;for&lt;/span&gt; more information. 88si2341819lfx.293 - gsmtp
data: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;421&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;4.7.0 [46.215.215.74      15] Our system has detected that this message is\n4.7.0 suspicious due to the very low reputation of the sending IP address.\n4.7.0 To protect our users from spam, mail sent from your IP address has\n4.7.0 been temporarily rate limited. Please visit\n4.7.0  https://support.google.com/mail/answer/188131 for more information. 88si2341819lfx.293 - gsmtp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
send: &lt;span class="s1"&gt;&amp;#39;rset\r\n&amp;#39;&lt;/span&gt;
Connection closed
Connection unexpectedly closed: &lt;span class="o"&gt;[&lt;/span&gt;Errno &lt;span class="m"&gt;10053&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; Nawiązane połączenie zostało przerwane przez oprogramowanie zainstalowane w komputerze-hoťcie
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jak widać serwer zerwał połączenie ze względów bezpieczeństwa. Trudno zresztą się dziwić, pozwolenie na
wysyłanie wiadomości bez choćby podstawowej autoryzacji użytkownika byłoby dużym zagrożeniem.
Spróbujemy więc zabezpieczyć naszą transmisję poprzez TLS &lt;code class="pyth python"&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;keyfile&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;certfile&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/code&gt; oraz zautoryzować się loginem
i hasłem do konta &lt;code class="pyth python"&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;smtplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email.mime.multipart&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email.mime.text&lt;/span&gt;

&lt;span class="n"&gt;SMTP_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SMTP_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter &amp;#39;To&amp;#39; email adress: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FROM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter &amp;#39;From&amp;#39; email address: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;prompt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter password: &amp;quot;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Subject&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter subject of your email: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;message_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Enter your message: &amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message_part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;server&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;smtplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTP&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;SMTP_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SMTP_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_debuglevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;ehlo&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;starttls&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FROM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sendmail&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;FROM&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;TO&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;as_string&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Niestety, próba wysłania wiadomości kończy się kolejnym błędem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;smtplib.SMTPAuthenticationError: &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;534&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;5.7.9 Application-specific password required. Learn more at\n5.7.9  https://support.google.com/mail/?p=InvalidSecondFactor m18sm1211864ljb.8 - gsmtp&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Krótka lektura informacji spod wskazanego w opisie błędu linka wyjaśnia, że problem wynika z dwuskładnikowego uwierzytelniania
i jego rozwiązaniem jest zautoryzowanie się hasłem wygenerowanym z poziomu ustawień konta. Postępując zgodnie z instrukcją
otrzymamy ciąg 16-tu znaków, który zastąpi nam nasze hasło do konta. Kolejna próba kończy się sukcesem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;send: &lt;span class="s1"&gt;&amp;#39;quit\r\n&amp;#39;&lt;/span&gt;
reply: &lt;span class="s1"&gt;&amp;#39;221 2.0.0 closing connection 75sm2003575lfy.27 - gsmtp\r\n&amp;#39;&lt;/span&gt;
reply: retcode &lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="m"&gt;221&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; Msg: &lt;span class="m"&gt;2&lt;/span&gt;.0.0 closing connection 75sm2003575lfy.27 - gsmtp
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Skoro umiemy już wysłać email, spróbujmy go rozbudować. Stwórzmy np. wiadomość w HTMLu dodając jednocześnie alternatywny czysty tekst:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;multipart&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEMultipart&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;alternative&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;text&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Hello!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;What&amp;#39;s your name?&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;   &amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;&amp;lt;br&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;   &amp;lt;p&amp;gt;What&amp;#39;s your name?&amp;lt;/p&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt; &amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;span class="s2"&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;part_plain&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;part_html&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;html&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part_plain&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;part_html&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Analogicznie możemy dołączyć plik binarny, choćby to &lt;a class="reference external" href="https://commons.wikimedia.org/wiki/File:%22A_Mogul_Trooper%22_(James_S._Virtue_Co.,_London,_1858).jpg#"&gt;zdjęcie&lt;/a&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;message_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEText&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;text&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;plain&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Look at this is very interesting photo.&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;message_part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fp&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;trooper.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;rb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;image_part&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;mime&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;image&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;MIMEImage&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;attach&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;image_part&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;fp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="pop3"&gt;
&lt;h2&gt;POP3&lt;/h2&gt;
&lt;p&gt;Do pobrania wiadomości ze skrzynki może być wykorzystany protokół POP3. Dostęp do niego daje nam moduł &lt;code class="pyth python"&gt;&lt;span class="n"&gt;poplib&lt;/span&gt;&lt;/code&gt;,
udostępniający klasy &lt;code class="pyth python"&gt;&lt;span class="n"&gt;POP3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;timeout&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt;&lt;/code&gt; oraz &lt;code class="pyth python"&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;port&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;keyfile&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;certfile&lt;/span&gt;&lt;span class="p"&gt;]]])&lt;/span&gt;&lt;/code&gt;.
Wykorzystamy oczywiście wersję z szyfrowaniem - taki
serwer nasłuchuje domyślnie na porcie 995 (w odróżnieniu od zwykłego POP3 nasłuchującego na porcie 110). Jest to o tyle
ważne, że 'zwykły' POP w ogóle nie szyfruje transmisji - dane, również hasło, przesyłane są czystym tekstem (chyba że
skorzystamy z komendy APOP).&lt;/p&gt;
&lt;p&gt;Spróbujmy więc na początek połączyć się z serwerem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;poplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;getpass&lt;/span&gt;

&lt;span class="n"&gt;POP3_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pop.googlemail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;POP3_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;995&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter your email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;password&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getpass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter your password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mailbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;poplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;POP3_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POP3_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pass_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;i od razu spodziewajmy się znanego już błędu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;poplib.error_proto: -ERR &lt;span class="o"&gt;[&lt;/span&gt;AUTH&lt;span class="o"&gt;]&lt;/span&gt; Application-specific password required: https://support.google.com/accounts/answer/185833
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zastąpienie hasła wygenerowanym wcześniej 'App password' rozwiązuje problem.
Spróbujmy więc dowiedzieć się od serwera czegoś więcej:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;poplib&lt;/span&gt;

&lt;span class="n"&gt;POP3_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;pop.googlemail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;POP3_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;995&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;username&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;raw_input&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Enter your email&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mailbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;poplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;POP3_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POP3_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_debuglevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pass_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;Message count &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;, mailbox size &lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;rset&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Message count &lt;span class="m"&gt;219&lt;/span&gt;, mailbox size &lt;span class="m"&gt;204595639&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+OK 219 messages (204595639 bytes)&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;1 17367&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;2 43517&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;3 17122&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt; , &lt;span class="s1"&gt;&amp;#39;219 133436&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;2281&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Metoda &lt;code class="pyth python"&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; zwraca status skrzynki w postaci tupli dwóch wartości: ilości wiadomości oraz
rozmiaru skrzynki. Dużo ciekawsza jest &lt;code class="pyth python"&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;list&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;. Zawołana bez żadnego argumentu podaje listę
wiadomości na serwerze. Zawołana z parametrem podaje wiadomość o przekazanym w parametrze numerze.&lt;/p&gt;
&lt;p&gt;Spróbujmy odczytać ostatnią wiadomość z listy, funkcją &lt;code class="pyth python"&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;which&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mailbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;poplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;POP3_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;POP3_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_debuglevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pass_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;password&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;retr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;()[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*cmd* &lt;span class="s1"&gt;&amp;#39;USER username@gmail.com&amp;#39;&lt;/span&gt;
*cmd* &lt;span class="s1"&gt;&amp;#39;PASS ****************&amp;#39;&lt;/span&gt;
*cmd* &lt;span class="s1"&gt;&amp;#39;RETR 219&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+OK message follows&amp;#39;&lt;/span&gt;, &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Return-Path: &amp;lt;username1@gmail.com&amp;gt;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Received: from (..) for &amp;lt;username@gmail.com&amp;gt;&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;        (version=TLS1_2 cipher=ECDHE-RSA-AES128-GCM-SHA256 bits=128/128);&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;        Mon, 20 Feb 2017 09:17:30 -0800 (PST)&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;Message-ID: &amp;lt;58ab24aa.ce18190a.d70c9.77ee@mx.google.com&amp;gt;&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;Date: Mon, 20 Feb 2017 09:17:30 -0800 (PST)&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;Content-Type: multipart/mixed; boundary=&amp;quot;===============0919153568==&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;MIME-Version: 1.0&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;TO: usernam@gmail.com&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;FROM: username1@gmail.com&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;Subject: Test&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;X-Antivirus: Avast (VPS 170220-1, 20.02.2017), Outbound message&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;X-Antivirus-Status: Clean&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;X-Antivirus: Avast (VPS 170220-2, 20.02.2017),&lt;/span&gt;
&lt;span class="s1"&gt;Inbound message&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;X-Antivirus-Status: Clean&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--===============0919153568==&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;Content-Type: text/plain; charset=&amp;quot;UTF-8&amp;quot;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;MIME-Version: 1.0&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Content-Transfer-Encoding: quoted-printable&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;This is an important message&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;---&amp;#39;&lt;/span&gt;,&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;,&lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--===============0919153568==&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;Content-Type: image/jpeg&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;MIME-Version: 1.0&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;Content-Transfer-Encoding: base64&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;/9j/4AAQSkZJRgABAQEBLAEsAAD/2wBDAAgGBgcGBQgHBwcJCQgKDBQNDAsLDBkSEw8UHRofHh0a&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;HBwgJC4nICIsIxwcKDcpLDAxNDQ0Hyc5PTgyPC4zNDL/2wBDAQkJCQwLDBgNDRgyIRwhMjIyMjIy&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;MjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjIyMjL/wAARCAH1AyIDASIA&amp;#39;&lt;/span&gt;,
&lt;span class="o"&gt;(&lt;/span&gt;...&lt;span class="o"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;iigAoFFFAB26UdeKKKAE4z0oxRRQAAU09ce9FFAAcA9KTuaKKAEprd6KKAIycDIppHNFFAETDnmo&amp;#39;&lt;/span&gt;,
&lt;span class="s1"&gt;&amp;#39;nHzYoooArGTBPH60UUUAf//Z&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;--===============0919153568==--&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;, &lt;span class="m"&gt;133527&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;
*cmd* &lt;span class="s1"&gt;&amp;#39;QUIT&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Ostatnią metodą, o której warto wspomnieć, jest &lt;code class="pyth python"&gt;&lt;span class="n"&gt;POP3_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setdebuglevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;level&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;. Wywołana z argumentem równym 1 zapewnia,
jak wyżej widać, średni poziom logowania. Natomiast z argumentem równym 2 lub większym zapisuje całą komunikację odbywającą
się na połączeniu kontrolnym:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_debuglevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;username&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pass_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox_status&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stat&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;quit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;*cmd* &lt;span class="s1"&gt;&amp;#39;USER usernam@gmail.com&amp;#39;&lt;/span&gt;
*put* &lt;span class="s1"&gt;&amp;#39;USER username@gmail.com&amp;#39;&lt;/span&gt;
*get* &lt;span class="s1"&gt;&amp;#39;+OK send PASS\r\n&amp;#39;&lt;/span&gt;
*resp* &lt;span class="s1"&gt;&amp;#39;+OK send PASS&amp;#39;&lt;/span&gt;
*cmd* &lt;span class="s1"&gt;&amp;#39;PASS ****************&amp;#39;&lt;/span&gt;
*put* &lt;span class="s1"&gt;&amp;#39;PASS ****************&amp;#39;&lt;/span&gt;
*get* &lt;span class="s1"&gt;&amp;#39;+OK Welcome.\r\n&amp;#39;&lt;/span&gt;
*resp* &lt;span class="s1"&gt;&amp;#39;+OK Welcome.&amp;#39;&lt;/span&gt;
*cmd* &lt;span class="s1"&gt;&amp;#39;STAT&amp;#39;&lt;/span&gt;
*put* &lt;span class="s1"&gt;&amp;#39;STAT&amp;#39;&lt;/span&gt;
*get* &lt;span class="s1"&gt;&amp;#39;+OK 219 204595639\r\n&amp;#39;&lt;/span&gt;
*resp* &lt;span class="s1"&gt;&amp;#39;+OK 219 204595639&amp;#39;&lt;/span&gt;
*stat* &lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;+OK&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;219&amp;#39;&lt;/span&gt;, &lt;span class="s1"&gt;&amp;#39;204595639&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
*cmd* &lt;span class="s1"&gt;&amp;#39;QUIT&amp;#39;&lt;/span&gt;
*put* &lt;span class="s1"&gt;&amp;#39;QUIT&amp;#39;&lt;/span&gt;
*get* &lt;span class="s1"&gt;&amp;#39;+OK Farewell.\r\n&amp;#39;&lt;/span&gt;
*resp* &lt;span class="s1"&gt;&amp;#39;+OK Farewell.&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="imap"&gt;
&lt;h2&gt;IMAP&lt;/h2&gt;
&lt;p&gt;W odróżnieniu od POP3, IMAP nie wymaga ściągnięcia wszystkich wiadomości na komputer lokalny. Transmitowane są jedynie
same nagłówki wiadomości, treść i załączniki przesyłane są na żądanie użytkownika. IMAP, poza pobraniem wiadomości,
pozwala na wykonywanie wielu innych operacji, jak tworzenie i zarządzanie katalogami czy kasowanie wiadomości bez konieczności
ich otwierania.&lt;/p&gt;
&lt;p&gt;Przykładowa sesja z użyciem protokołu IMAP może wyglądać tak:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imaplib&lt;/span&gt;

&lt;span class="n"&gt;IMAP_SERWER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imap.googlemail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;IMAP_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;993&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;USER_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;username@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;****************&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;mailbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imaplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IMAP4_SSL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IMAP_SERWER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMAP_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;USER_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Inbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ALL&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;RFC822&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+FLAGS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Seen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Jest to prosty program wypisujący zawartość wszystkich wiadomości w skrzynce odbiorczej a następnie oznaczający je jako przeczytane.
Tak, jak przy POP3, zaczynamy od
utworzenia szyfrowanego połączenia i, analogicznie do poprzednich przykładów, uwierzytelniamy się adresem email oraz 'App password'.
Następnie funkcją &lt;code class="pyth python"&gt;&lt;span class="n"&gt;IMAP4_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'INBOX'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;readonly&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; wybieramy skrzynkę, z którą chcemy pracować. Domyślnie są to wiadomości odebrane,
natomiast nic nie stoi na przeszkodzie, by wybrać np. utworzony w ramach konta pocztowego folder.
&lt;code class="pyth python"&gt;&lt;span class="n"&gt;IMAP4_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;charset&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;criteria&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; umożliwia przeszukiwanie skrzynki wg zadanych kryteriów, np. &lt;code class="pyth python"&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(FROM &amp;quot;admin&amp;quot; SUBJECT &amp;quot;Warning&amp;quot;)'&lt;/span&gt;&lt;/code&gt;.
Parametry polecenia &lt;strong&gt;SEARCH&lt;/strong&gt; można znaleźć w &lt;a class="reference external" href="https://tools.ietf.org/html/rfc3501#section-6.4.5"&gt;RFC3501&lt;/a&gt;.
Potem &lt;code class="pyth python"&gt;&lt;span class="n"&gt;IMAP4_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;message_parts&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; pobiera wskazane elementy wiadomości. W naszym przypadku jest to cała wiadomość,
tak, jak jest zdefiniowana w RFC822. Można oczywiście pobrać część wiadomości, np. poniższy kod pobiera same nagłówki:
&lt;code class="pyth python"&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'(BODY.PEEK[HEADER])'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;. Więcej na temat polecenia &lt;strong&gt;FETCH&lt;/strong&gt; można znaleźć we wspomnianym &lt;a class="reference external" href="https://tools.ietf.org/html/rfc3501#section-6.4.5"&gt;RFC3501&lt;/a&gt;.
Na koniec funkcją &lt;code class="pyth python"&gt;&lt;span class="n"&gt;IMAP4_SSL&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;message_set&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;flag_list&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; ustawiamy na wiadomościach flagę 'Seen' - wiadomości
zostają oznaczone jako przeczytane. Listę dostępnych flag jest opisana &lt;a class="reference external" href="https://tools.ietf.org/html/rfc3501.html#section-2.3.2"&gt;tu&lt;/a&gt;.
Oczywiście flagi można też zdejmować. Przykładowo, wystarczy użyć '-FLAGS' zamiast
'+FLAGS': &lt;code class="pyth python"&gt;&lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-FLAGS'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Seen'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;, by wiadomość oznaczyć jako nieprzeczytaną.&lt;/p&gt;
&lt;p&gt;Jak już wspomniałem, IMAP daje dużo większe możliwości niż POP3. Możemy, na przykład, pobrać same załączniki w formacie
jpeg z wybranych wiadomości:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;imaplib&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;email&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;uuid&lt;/span&gt;

&lt;span class="n"&gt;IMAP_SERWER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;imap.googlemail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;IMAP_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;993&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;user_name&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;USER_NAME&lt;/span&gt;
&lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;****************&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;mailbox&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;imaplib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;IMAP4_SSL&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;IMAP_SERWER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;IMAP_PORT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;login&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;USER_NAME&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;select&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Inbox&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;search&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;(FROM &amp;quot;me&amp;quot; Subject &amp;quot;Photo&amp;quot;)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="n"&gt;ms&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;fetch&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;(RFC822)&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="n"&gt;message&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_content_type&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;image/jpeg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;payload&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;part&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;.jpg&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;wb&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;payload&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;typ&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;data&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;store&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;+FLAGS&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\\&lt;/span&gt;&lt;span class="s1"&gt;Seen&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;close&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;span class="n"&gt;mailbox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;logout&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;code class="pyth python"&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message_from_string&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;kws&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; parsuje string na obiekt typu &lt;code class="pyth python"&gt;&lt;span class="n"&gt;email&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; dający
interfejs do zarządzania nagłówkami i treścią wiadomości. &lt;code class="pyth python"&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;walk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; jest generatorem umożliwiającym
iterację poprzez kolejne części wiadomości, w naszym przypadku szukamy elementów typu 'image/jpeg'. Wreszcie, metodą
&lt;code class="pyth python"&gt;&lt;span class="n"&gt;Message&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_payload&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[,&lt;/span&gt; &lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;/code&gt; pobieramy zawartość załącznika. By uniknąć konfliktów nazw, plik(i)
zapisujemy pod unikalnymi nazwami będącymi ID zwracanymi przez &lt;code class="pyth python"&gt;&lt;span class="n"&gt;uuid&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;uuid4&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="wysylanie-logow-mailem"&gt;
&lt;h2&gt;Wysyłanie logów mailem&lt;/h2&gt;
&lt;p&gt;Moduł &lt;code class="pyth python"&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;/code&gt; dostarcza bardzo użyteczny handler umożliwiający łatwe wysyłanie wiadomości z logów na
podane adresy email: &lt;code class="pyth python"&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTPHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;mailhost&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fromaddr&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;toaddrs&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;subject&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;credentials&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;logging.handlers&lt;/span&gt;

&lt;span class="n"&gt;SMTP_SERVER&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;smtp.gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SMTP_PORT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;587&lt;/span&gt;
&lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;FROM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;from@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;TO&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;to@gmail.com&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;SUBJECT&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Important message from logging system&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;logger&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getLogger&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setLevel&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DEBUG&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;SMTPHandler&lt;/span&gt;&lt;span class="p"&gt;((&lt;/span&gt;&lt;span class="n"&gt;SMTP_SERVER&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SMTP_PORT&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;FROM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;TO&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;SUBJECT&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;FROM&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;APP_PASSWORD&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt; &lt;span class="n"&gt;secure&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setFormatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Formatter&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="si"&gt;%(asctime)-15s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(levelname)-5s&lt;/span&gt;&lt;span class="s2"&gt; &lt;/span&gt;&lt;span class="si"&gt;%(message)s&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;addHandler&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;handler&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Some usefull message&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;error&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;There is a big error&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logger&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Just ordinary info&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;logging&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;shutdown&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Parametr &lt;code class="pyth python"&gt;&lt;span class="n"&gt;mailhost&lt;/span&gt;&lt;/code&gt; może być stringiem z adresem serwera SMTP - użyty będzie wtedy domyślny port lub tuplą z
adresem serwera i portem. Parametr &lt;code class="pyth python"&gt;&lt;span class="n"&gt;toaddrs&lt;/span&gt;&lt;/code&gt; zawiera listę adresatów oddzieloną przecinkami. Jeśli serwer wymaga
autoryzacji, do &lt;code class="pyth python"&gt;&lt;span class="n"&gt;credentials&lt;/span&gt;&lt;/code&gt; przekazujemy login i hasło. Wreszcie, by skorzystać z TLS, trzeba do parametru
&lt;code class="pyth python"&gt;&lt;span class="n"&gt;secure&lt;/span&gt;&lt;/code&gt; przekazać krotkę: pustą lub z nazwą klucza lub nazwą klucza i certyfikatem.&lt;/p&gt;
&lt;/div&gt;
</content><category term="programowanie"></category><category term="python"></category><category term="email"></category></entry><entry><title>Raspberry Pi: moduły jądra - część 2</title><link href="/posts/2017/02/13/rpi-lkm-part-2.html" rel="alternate"></link><published>2017-02-13T21:00:00+01:00</published><updated>2017-02-13T21:00:00+01:00</updated><author><name>Krzysiek Witkowicz</name></author><id>tag:None,2017-02-13:/posts/2017/02/13/rpi-lkm-part-2.html</id><summary type="html">&lt;p&gt;W poprzedniej &lt;a class="reference external" href="/posts/2017/02/07/rpi-lkm-part-1.html"&gt;częśc&lt;/a&gt; pokazałem, jak zbudować i załadować do pamięci najprostszy moduł. Teraz postaram się opisać wybrane sposoby
komunikacji pomiędzy użytkownikiem a modułami. Zacznę od pisania do logu oraz przekazywania do modułu parametrów z wiersza poleceń.&lt;/p&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;p&gt;W sumie jet to program od którego należałoby zacząć - wypisanie przywitania, w …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;p&gt;W poprzedniej &lt;a class="reference external" href="/posts/2017/02/07/rpi-lkm-part-1.html"&gt;częśc&lt;/a&gt; pokazałem, jak zbudować i załadować do pamięci najprostszy moduł. Teraz postaram się opisać wybrane sposoby
komunikacji pomiędzy użytkownikiem a modułami. Zacznę od pisania do logu oraz przekazywania do modułu parametrów z wiersza poleceń.&lt;/p&gt;
&lt;div class="section" id="hello-world"&gt;
&lt;h2&gt;Hello World&lt;/h2&gt;
&lt;p&gt;W sumie jet to program od którego należałoby zacząć - wypisanie przywitania, w naszym przypadku do logu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/init.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/module.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;MODULE_LICENSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GPL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_AUTHOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Krzysiek Witkowicz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Hello World from the linux kernel module&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_VERSION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;hello_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Hello World from the first Kernel Module!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
          &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;__exit&lt;/span&gt; &lt;span class="nf"&gt;hello_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
          &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Goodbye from the Kernel Module!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;module_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;module_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hello_exit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Należy zwrócić uwagę na 2 rzeczy:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;Makra &lt;code class="c"&gt;&lt;span class="n"&gt;MODULE_&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;/code&gt; zapewniają informacje dla modinfo&lt;/li&gt;
&lt;li&gt;Funkcja &lt;code class="c"&gt;&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; - jądro nie ma dostępu do bibliotek z przestrzeni użytkownika, tak więc nie możemy skorzystać z funkcji &lt;code class="c"&gt;&lt;span class="n"&gt;printf&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;. Zamiast niej musimy użyć dedykowanej do pracy w przestrzeni jądra &lt;code class="c"&gt;&lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Dopisujemy obiekt hello.o do Makefile, kompilujemy a następnie ładujemy i usuwamy nasz nowy moduł:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo insmod hello.ko
pi@raspberrypi:~ $ sudo rmmod hello.ko
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Możemy teraz zajrzeć do logu /var/log/kern.log&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Feb  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:20:14 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;9649&lt;/span&gt;.667909&lt;span class="o"&gt;]&lt;/span&gt; Hello World from the first Kernel Module!
Feb  &lt;span class="m"&gt;7&lt;/span&gt; &lt;span class="m"&gt;19&lt;/span&gt;:20:22 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;9657&lt;/span&gt;.602222&lt;span class="o"&gt;]&lt;/span&gt; Goodbye from the Kernel Module!
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="przekazywania-parametrow-do-modulu"&gt;
&lt;h2&gt;Przekazywania parametrów do modułu&lt;/h2&gt;
&lt;p&gt;Jedną z metod komunikacji z modułem jądra jest przekazywanie parametrów podczas ładowania modułu. Pokazuje to poniższy
przykład:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/init.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/module.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/moduleparam.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="n"&gt;MODULE_LICENSE&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;GPL&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_AUTHOR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Krzysiek Witkowicz&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_DESCRIPTION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;Passing command line arguments to LKM&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_VERSION&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;char&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;How are you?&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;integer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;strange_short&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;666&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{};&lt;/span&gt;
&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;array_num&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

&lt;span class="n"&gt;module_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0000&lt;/span&gt; &lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_PARM_DESC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My string&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;module_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;S_IRUSR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IWUSR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IRGRP&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IROTH&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_PARM_DESC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My integer&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;module_param_named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;normal_short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;strange_short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0644&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_PARM_DESC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;strange_short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My named parameter&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;module_param_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;&lt;span class="n"&gt;array_num&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mo"&gt;0000&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;MODULE_PARM_DESC&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My array of longs&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;cli_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
           &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;My parameters are: &lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;string %s&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;integer %d&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;integer&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;short %hd&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;strange_short&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;table got %d elements and contains:&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;array_num&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
           &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="k"&gt;sizeof&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;long&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="o"&gt;++&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
           &lt;span class="p"&gt;{&lt;/span&gt;
                   &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="se"&gt;\t&lt;/span&gt;&lt;span class="s"&gt;element[%d] = %ld&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;my_array&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;]);&lt;/span&gt;

           &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;__exit&lt;/span&gt; &lt;span class="n"&gt;cli_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
           &lt;span class="n"&gt;printk&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;KERN_INFO&lt;/span&gt; &lt;span class="s"&gt;&amp;quot;Goodbye from the Kernel Module!&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s"&gt;&amp;quot;&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;module_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cli_init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;module_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cli_exit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zaczynamy od zdefiniowania zmiennych globalnych, których wartość potem będziemy mogli zmodyfikować przy zawołaniu &lt;code class="bash"&gt;insmod&lt;/code&gt;.
Następnie, przy użyciu makra &lt;code class="c"&gt;&lt;span class="n"&gt;module_param&lt;/span&gt;&lt;/code&gt; wskazujemy te zmienne jako argumenty wiersza poleceń. Ostatecznie, przy
użyciu &lt;code class="c"&gt;&lt;span class="n"&gt;MODULE_PARM_DESC&lt;/span&gt;&lt;/code&gt; dokumentujemy nasze parametry - dzięki temu ich opis będzie widoczny w &lt;code class="bash"&gt;modinfo&lt;/code&gt;.&lt;/p&gt;
&lt;div class="section" id="module-param"&gt;
&lt;h3&gt;module_param&lt;/h3&gt;
&lt;p&gt;Jak przed chwilą wspomniałem, makro &lt;code class="c"&gt;&lt;span class="n"&gt;module_param&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; służy do określenia parametrów modułu. Przyjmuje ono
następujące parametry:&lt;/p&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;name&lt;/strong&gt; - nazwa parametru: ta sama nazwa dotyczy zarówno zmiennej użytej w kodzie jak i nazwy jaką wskazuje użytkownik. Możliwe jest również użycie nazwanych parametrów przy pomocy makra &lt;code class="c"&gt;&lt;span class="n"&gt;module_param_named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;variable&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt; - wartość &lt;code class="c"&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;/code&gt; jest wykorzystywana przez użytkownika, natomiast &lt;code class="c"&gt;&lt;span class="n"&gt;variable&lt;/span&gt;&lt;/code&gt; odpowiada zmiennej w kodzie modułu.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;type&lt;/strong&gt; - typ użytego argumentu. Możliwe rodzaje to &lt;code class="c"&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;short&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ushort&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;uint&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;long&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ulong&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;charp&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kt"&gt;bool&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;invbool&lt;/span&gt;&lt;/code&gt;. Nazwy są samotłumaczące się, ciekawostką jest &lt;code class="c"&gt;&lt;span class="n"&gt;invbool&lt;/span&gt;&lt;/code&gt; przechowujący wartość przeciwną do podanej przez użytkownika. &lt;code class="c"&gt;&lt;span class="n"&gt;byte&lt;/span&gt;&lt;/code&gt; jest przechowywany w pojedynczym &lt;code class="c"&gt;&lt;span class="kt"&gt;char&lt;/span&gt;&lt;/code&gt;, &lt;code class="c"&gt;&lt;span class="kt"&gt;bool&lt;/span&gt;&lt;/code&gt; oraz &lt;code class="c"&gt;&lt;span class="n"&gt;invbool&lt;/span&gt;&lt;/code&gt; w &lt;code class="c"&gt;&lt;span class="kt"&gt;int&lt;/span&gt;&lt;/code&gt;. Pozostałe typy przechowywane są w odpowiadających im typach języka C.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perm&lt;/strong&gt; - opis uprawnień dla odpowiadającego pliku w sysfs. Uprawnienia mogą być podane w dobrze znanym formacie ósemkowym np. 0664 (&lt;code class="bash"&gt;-rw-rw-r--&lt;/code&gt;) lub też przy pomocy flag bitowych np. &lt;code class="c"&gt;&lt;span class="n"&gt;S_IRUSR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IWUSR&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="n"&gt;S_IRGRP&lt;/span&gt;&lt;/code&gt; co odpowiada uprawnieniom 0640. Podanie samego zera blokuje wpis w sysfs.&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class="section" id="module-param-array"&gt;
&lt;h3&gt;module_param_array&lt;/h3&gt;
&lt;p&gt;Do modułu można również przekazać listę parametrów, która będzie przechowywana w zwykłej tablicy. Służy do tego
makro &lt;code class="c"&gt;&lt;span class="n"&gt;module_param_array&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nump&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;. Parametry &lt;code class="c"&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;/code&gt; są analogiczne do tych z &lt;code class="c"&gt;&lt;span class="n"&gt;module_param&lt;/span&gt;&lt;/code&gt;.
Nowością jest parametr &lt;strong&gt;nump&lt;/strong&gt; - wskaźnik na zmienną typu integer w której jądro będzie przechowywać ilość przekazanych elementów listy.
Należy pamiętać, by tablica wskazywana prze parametr &lt;code class="c"&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;/code&gt; była zaalokowana statycznie - rozmiar tablicy musi być znany na etapie
kompilacji.&lt;/p&gt;
&lt;p&gt;Analogicznie do &lt;code class="c"&gt;&lt;span class="n"&gt;module_param&lt;/span&gt;&lt;/code&gt; możliwe jest użycie parametrów nazwanych - służy do tego makro &lt;code class="c"&gt;&lt;span class="n"&gt;module_param_array_named&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;array&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;nump&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;perm&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;A tak wygląda nasz moduł &amp;quot;w akcji&amp;quot;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo insmod cli_arguments.ko &lt;span class="nv"&gt;normal_short&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;-11 &lt;span class="nv"&gt;integer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;12345&lt;/span&gt;
pi@raspberrypi:~ $ tail -10 /var/log/kern.log
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872885&lt;span class="o"&gt;]&lt;/span&gt; My parameters are:
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872907&lt;span class="o"&gt;]&lt;/span&gt; string How are you?
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872915&lt;span class="o"&gt;]&lt;/span&gt; integer &lt;span class="m"&gt;12345&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872922&lt;span class="o"&gt;]&lt;/span&gt; short -11
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872929&lt;span class="o"&gt;]&lt;/span&gt; table got &lt;span class="m"&gt;0&lt;/span&gt; elements:
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872937&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872944&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872950&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872957&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:28:36 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;7597&lt;/span&gt;.872964&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
pi@raspberrypi:~ $ sudo rmmod  cli_arguments.ko
pi@raspberrypi:~ $ sudo insmod cli_arguments.ko &lt;span class="nv"&gt;my_array&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;111&lt;/span&gt;,54353,-33333 &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;quot;Linux kernel modules are easy.&amp;quot;&amp;#39;&lt;/span&gt;
pi@raspberrypi:~ $ tail -10 /var/log/kern.log
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387032&lt;span class="o"&gt;]&lt;/span&gt; My parameters are:
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387061&lt;span class="o"&gt;]&lt;/span&gt; string Linux kernel modules are easy.
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387073&lt;span class="o"&gt;]&lt;/span&gt; integer &lt;span class="m"&gt;0&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387083&lt;span class="o"&gt;]&lt;/span&gt; short &lt;span class="m"&gt;666&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387093&lt;span class="o"&gt;]&lt;/span&gt; table got &lt;span class="m"&gt;3&lt;/span&gt; elements:
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387104&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;111&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387115&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;54353&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387126&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; -33333
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387136&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
Feb &lt;span class="m"&gt;13&lt;/span&gt; &lt;span class="m"&gt;20&lt;/span&gt;:40:49 raspberrypi kernel: &lt;span class="o"&gt;[&lt;/span&gt; &lt;span class="m"&gt;8330&lt;/span&gt;.387146&lt;span class="o"&gt;]&lt;/span&gt;      element&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="m"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Należy zwrócić uwagę na sposób przekazywania napisu jako parametru. W przypadku takiego zawołania:
&lt;code class="bash"&gt;sudo insmod cli_arguments.ko &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;Hi there!&amp;quot;&lt;/span&gt;&lt;/code&gt; pojedyncze cudzysłowy zostaną 'zjedzone' przez
powłokę i insmod przekaże następujący argument &lt;code class="bash"&gt;&lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;Hi there!&lt;/code&gt;. Jądro potraktuje 'Hi' jako wartość parametru 'string',
natomiast 'there!' zostanie uznane za kolejny (nierozpoznany) argument. Aby tego uniknąć wystarczy otoczyć podwójny
cudzysłów pojedynczym: &lt;code class="bash"&gt;sudo insmod cli_arguments.ko &lt;span class="nv"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'&amp;quot;Hi there&amp;quot;'&lt;/span&gt;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;W następnej &lt;a class="reference external" href="/posts/2017/03/14/rpi-lkm-part-3.html"&gt;cześci&lt;/a&gt; pokażę prosty sposób na komunikację z modułem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programowanie"></category><category term="c"></category><category term="raspberry pi"></category><category term="kernel"></category></entry><entry><title>Raspberry Pi: moduły jądra - część 1</title><link href="/posts/2017/02/07/rpi-lkm-part-1.html" rel="alternate"></link><published>2017-02-07T22:00:00+01:00</published><updated>2017-02-07T22:00:00+01:00</updated><author><name>Krzysiek Witkowicz</name></author><id>tag:None,2017-02-07:/posts/2017/02/07/rpi-lkm-part-1.html</id><summary type="html">&lt;div class="section" id="wstep"&gt;
&lt;h2&gt;Wstęp&lt;/h2&gt;
&lt;p&gt;Dzięki modułowej budowie jądro Linuxa łączy w sobie zarówno zalety makro jak i mikrokerneli. Wydzielone fragmenty kodu,
nazywane LKM, odpowiadające za obsługę sprzętu, protokołów sieciowych czy systemów plików mogą być ładowane i usuwane
z przestrzeni jądra, co ogranicza rozmiar samego jądra oraz znacznie ułatwia rozwój i testowanie nowych funkcjonalności …&lt;/p&gt;&lt;/div&gt;</summary><content type="html">&lt;div class="section" id="wstep"&gt;
&lt;h2&gt;Wstęp&lt;/h2&gt;
&lt;p&gt;Dzięki modułowej budowie jądro Linuxa łączy w sobie zarówno zalety makro jak i mikrokerneli. Wydzielone fragmenty kodu,
nazywane LKM, odpowiadające za obsługę sprzętu, protokołów sieciowych czy systemów plików mogą być ładowane i usuwane
z przestrzeni jądra, co ogranicza rozmiar samego jądra oraz znacznie ułatwia rozwój i testowanie nowych funkcjonalności.
Moduł jądra można więc traktować jako koncepcję analogiczną od sterownika w DOS/Windows, choć obsługuje nie tylko urządzenia -
może bezpośrednio pisać/czytać z systemu plików.&lt;/p&gt;
&lt;p&gt;Wbrew pozorom, napisanie własnego modułu jądra nie jest rzeczą bardzo skomplikowaną. Zasadniczo wystarcza
znajomość C, by poradzić sobie z takim zadaniem. Postaram się pokazać w kilku przykładach, jak, wykorzystując Raspberry Pi,
stworzyć własny moduł.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="najprostszy-modul"&gt;
&lt;h2&gt;Najprostszy moduł&lt;/h2&gt;
&lt;p&gt;Zaczniemy od najprostszego, możliwego do skompilowania kodu. Poniższy program nic nie robi, poza tym, że można go
załadować i usunąć z jądra Linuxa.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/init.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;
&lt;span class="cp"&gt;#include&lt;/span&gt; &lt;span class="cpf"&gt;&amp;lt;linux/module.h&amp;gt;&lt;/span&gt;&lt;span class="cp"&gt;&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;int&lt;/span&gt; &lt;span class="n"&gt;__init&lt;/span&gt; &lt;span class="nf"&gt;dummy_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;static&lt;/span&gt; &lt;span class="kt"&gt;void&lt;/span&gt; &lt;span class="n"&gt;__exit&lt;/span&gt; &lt;span class="nf"&gt;dummy_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kt"&gt;void&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="n"&gt;module_init&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy_init&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;span class="n"&gt;module_exit&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;dummy_exit&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Kod, choć zajmuje kilka linijek, jest całkiem ciekawy. Przede wszystkim rzuca się w oczy brak funkcji &lt;code class="c"&gt;&lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt;. Wynika
to z faktu, iż moduły nie wykonują się sekwencyjnie. Ich głównym zadaniem jest oczekiwanie na konkretne żądania i ich
obsługa - tak, jak w programowaniu sterowanym zdarzeniami. Kolejną różnicą sią makra
&lt;code class="c"&gt;&lt;span class="n"&gt;module_init&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; oraz &lt;code class="c"&gt;&lt;span class="n"&gt;module_exit&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;/code&gt; służące do zarejestrowania funkcji wykonujących się kolejno podczas
ładowania i usuwania modułu. Różnic pomiędzy tradycyjną aplikacją a modułem jądra jest oczywiście więcej. Przede wszystkim
moduły 'żyją' w przestrzeni jądra a nie w przestrzeni użytkownika. Komunikacja pomiędzy przestrzeniami odbywa się
poprzez ściśle zdefiniowany interfejs. W modułach wszelkie zaalokowane zasoby zwalniamy ręcznie podczas usuwania modułu -
system tego za nas nie zrobi. Moduły jądra nie zapewniają też np. wsparcia dla operacji zmiennoprzecinkowych.&lt;/p&gt;
&lt;p&gt;Aby zbudować powyższy przykład będziemy potrzebować odpowiedniego Makefile, a dokładniej biorąc kbuild Makefile:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;obj-m&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;dummy.o

&lt;span class="nf"&gt;all&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
               make -C /lib/modules/&lt;span class="k"&gt;$(&lt;/span&gt;shell uname -r&lt;span class="k"&gt;)&lt;/span&gt;/build/ &lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PWD&lt;span class="k"&gt;)&lt;/span&gt; modules
&lt;span class="nf"&gt;clean&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
               make -C /lib/modules/&lt;span class="k"&gt;$(&lt;/span&gt;shell uname -r&lt;span class="k"&gt;)&lt;/span&gt;/build/ &lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;$(&lt;/span&gt;PWD&lt;span class="k"&gt;)&lt;/span&gt; clean
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Najważniejsza jest pierwsza linijka: dyrektywa &lt;code class="pyth python"&gt;&lt;span class="n"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt;&lt;/code&gt; wskazuje, że chcemy zbudować moduł jądra. Cel clean nie jest
na tym etapie absolutnie konieczny, dodałem go ze względu na konwencję. Tworzymy więc plik Makefile o w/w treści i
próbujemy skompilować nasz moduł:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Powinniśmy otrzymać informację o poprawnym zbudowaniu modułu:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make -C /lib/modules/4.4.36-v7+/build/ &lt;span class="nv"&gt;M&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;/home/pi/c/kernel
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Wejście &lt;span class="k"&gt;do&lt;/span&gt; katalogu &lt;span class="s1"&gt;&amp;#39;/usr/src/linux-rpi-4.4.y&amp;#39;&lt;/span&gt;
  CC &lt;span class="o"&gt;[&lt;/span&gt;M&lt;span class="o"&gt;]&lt;/span&gt;  /home/pi/c/kernel/dummy.o
  Building modules, stage &lt;span class="m"&gt;2&lt;/span&gt;.
  MODPOST &lt;span class="m"&gt;1&lt;/span&gt; modules
  CC      /home/pi/c/kernel/dummy.mod.o
  LD &lt;span class="o"&gt;[&lt;/span&gt;M&lt;span class="o"&gt;]&lt;/span&gt;  /home/pi/c/kernel/dummy.ko
make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: Opuszczenie katalogu &lt;span class="s1"&gt;&amp;#39;/usr/src/linux-rpi-4.4.y&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Niestety, bardziej prawdopodobny będzie błąd kompilacji wynikający z braku katalogu &lt;code class="bash"&gt;build&lt;/code&gt; w ścieżce
&lt;code class="bash"&gt;/lib/modules/&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;make&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;: *** /lib/modules/4.4.36-v7+/build/: Nie ma takiego pliku ani katalogu.
 Stop.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Przygotujmy więc Raspberry Pi do kompilacji LKM...&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="budowa-srodowiska-developerskiego"&gt;
&lt;h2&gt;Budowa środowiska developerskiego&lt;/h2&gt;
&lt;p&gt;U mnie zadziałała następująca metoda:&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Aktualizujemy raspbiana&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get update
sudo apt-get upgrade
sudo rpi-update
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Instalujemy najświeższe pliki nagłówkowe&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo apt-get install raspberrypi-kernel-headers
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="3"&gt;
&lt;li&gt;Sprawdzamy wersję zainstalowanego jądra&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;uname -r
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;U mnie była to &lt;strong&gt;4.4.36-v7+&lt;/strong&gt;&lt;/p&gt;
&lt;ol class="arabic simple" start="4"&gt;
&lt;li&gt;Dociągamy brakujące źródła&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;wget https://github.com/raspberrypi/linux/archive/rpi-4.4.y.zip
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;i podlinkowujemy je do katalogu &lt;code class="bash"&gt;build&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;unzip rpi-4.4.y.zip
sudo mv linux-rpi-4.4.y/ /usr/src
ln -s /usr/src/linux-rpi-4.4.y/ /lib/modules/4.4.36-v7+/build
&lt;/pre&gt;&lt;/div&gt;
&lt;ol class="arabic simple" start="5"&gt;
&lt;li&gt;Konfigurujemy&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; /lib/modules/4.4.36-v7+/build
sudo make mproper
sudo modprobe configs
sudo gzip -dc /proc/config.gz &amp;gt;.config
sudo make modules_prepare
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;i zasadniczo gotowe. Napotkałem jeszcze problem związany z niewłaściwą wersją pliku Module.symvers, którego rozwiązanie
było banalnie proste:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;sudo cp /usr/src/linux-headers-4.4.34-v7+/Module.symvers /usr/src/linux-rpi-4.4.y/Module.symvers
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="zarzadzanie-modulami"&gt;
&lt;h2&gt;Zarządzanie modułami&lt;/h2&gt;
&lt;p&gt;Linux udostępnia zestaw poleceń do zarządzania modułami jądra, od wyświetlenia listy wykorzystywanych w danej chwili
modułów, po ich ładowanie i kasowanie.&lt;/p&gt;
&lt;div class="section" id="informacja-o-modulach"&gt;
&lt;h3&gt;Informacja o modułach&lt;/h3&gt;
&lt;p&gt;&lt;code class="bash"&gt;lsmod&lt;/code&gt; wyświetla listę załadowanych modułów&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ lsmod
Module                  Size  Used by
binfmt_misc             &lt;span class="m"&gt;6388&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt;
r8188eu               &lt;span class="m"&gt;421558&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
cfg80211              &lt;span class="m"&gt;428431&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; r8188eu
joydev                  &lt;span class="m"&gt;9024&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
evdev                  &lt;span class="m"&gt;11396&lt;/span&gt;  &lt;span class="m"&gt;6&lt;/span&gt;
rfkill                 &lt;span class="m"&gt;16037&lt;/span&gt;  &lt;span class="m"&gt;2&lt;/span&gt; cfg80211
snd_bcm2835            &lt;span class="m"&gt;20447&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
snd_pcm                &lt;span class="m"&gt;75762&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; snd_bcm2835
snd_timer              &lt;span class="m"&gt;19288&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; snd_pcm
snd                    &lt;span class="m"&gt;51908&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt; snd_bcm2835,snd_timer,snd_pcm
bcm2835_gpiomem         &lt;span class="m"&gt;3040&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
bcm2835_wdt             &lt;span class="m"&gt;3225&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
uio_pdrv_genirq         &lt;span class="m"&gt;3164&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
uio                     &lt;span class="m"&gt;8000&lt;/span&gt;  &lt;span class="m"&gt;1&lt;/span&gt; uio_pdrv_genirq
i2c_dev                 &lt;span class="m"&gt;5859&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
fuse                   &lt;span class="m"&gt;84037&lt;/span&gt;  &lt;span class="m"&gt;3&lt;/span&gt;
ipv6                  &lt;span class="m"&gt;347594&lt;/span&gt;  &lt;span class="m"&gt;34&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Polecenie podaje kolejno: nazwę modułu, jego rozmiar w pamięci, licznik użycia oraz listę modułów zależnych.&lt;/p&gt;
&lt;p&gt;Szczegółowe informacje o danym module uzyskamy korzystając z &lt;code class="bash"&gt;modinfo&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ modinfo ipv6
filename:       /lib/modules/4.4.36-v7+/kernel/net/ipv6/ipv6.ko
alias:          net-pf-10
license:        GPL
description:    IPv6 protocol stack &lt;span class="k"&gt;for&lt;/span&gt; Linux
author:         Cast of dozens
srcversion:     82E583AF10098874E2B2E17
depends:
intree:         Y
vermagic:       &lt;span class="m"&gt;4&lt;/span&gt;.4.36-v7+ SMP mod_unload modversions ARMv7
parm:           disable:Disable IPv6 module such that it is non-functional &lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="o"&gt;)&lt;/span&gt;
parm:           disable_ipv6:Disable IPv6 on all interfaces &lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="o"&gt;)&lt;/span&gt;
parm:           autoconf:Enable IPv6 address autoconfiguration on all interfaces &lt;span class="o"&gt;(&lt;/span&gt;int&lt;span class="o"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Mamy informację m.in. o ścieżce do modułu, licencji, autorach, zależnościach czy przekazywanych parametrach. Należy mieć
na uwadze, że zapewnienie takich informacji jak np. opis czy lista autorów leży w gestii programistów piszących dany moduł.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="ladowanie-modulu-do-pamieci"&gt;
&lt;h3&gt;Ładowanie modułu do pamięci&lt;/h3&gt;
&lt;p&gt;Do załadowania modułu służy polecenie &lt;code class="bash"&gt;insmod&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo insmod dummy.ko
pi@raspberrypi:~ $ lsmod &lt;span class="p"&gt;|&lt;/span&gt;grep dummy
dummy                    &lt;span class="m"&gt;734&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Należy pamiętać, że próba załadowania załadowanego już modułu zakończy się błędem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo insmod dummy.ko
insmod: ERROR: could not insert module dummy.ko: File exists
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="usuwanie-modulu"&gt;
&lt;h3&gt;Usuwanie modułu&lt;/h3&gt;
&lt;p&gt;Załadowany moduł możemy usunąć poleceniem &lt;code class="bash"&gt;rmmod&lt;/code&gt;:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo rmmod dummy.ko
pi@raspberrypi:~ $ lsmod &lt;span class="p"&gt;|&lt;/span&gt;grep dummy
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Analgicznie do &lt;code class="bash"&gt;insmod&lt;/code&gt; próba usunięcia niezaładowanego modułu skutkuje błędem:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo rmmod dummy.ko
rmmod: ERROR: Module dummy is not currently loaded
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="modprobe"&gt;
&lt;h3&gt;Modprobe&lt;/h3&gt;
&lt;p&gt;Polecenie &lt;code class="bash"&gt;modprobe&lt;/code&gt; jest kombajnem zastępującym, wspomniane wcześniej, &lt;code class="bash"&gt;insmod&lt;/code&gt; oraz &lt;code class="bash"&gt;rmmod&lt;/code&gt;.
Modprobe nie tylko wykrywa zależności pomiędzy modułami, ale również pozwala na automatyzację zarządzania modułami poprzez
pliki konfiguracyjne.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pi@raspberrypi:~ $ sudo modprobe dummy
pi@raspberrypi:~ $ lsmod &lt;span class="p"&gt;|&lt;/span&gt;grep dummy
dummy                   &lt;span class="m"&gt;2845&lt;/span&gt;  &lt;span class="m"&gt;0&lt;/span&gt;
pi@raspberrypi:~ $ sudo modprobe -r dummy
pi@raspberrypi:~ $ lsmod &lt;span class="p"&gt;|&lt;/span&gt;grep dummy
pi@raspberrypi:~ $
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Zobaczyliśmy, w jaki sposób przygotować Raspberry do kompilacji prostego modułu oraz jak takim modułem zarządzać.
W następnej &lt;a class="reference external" href="/posts/2017/02/13/rpi-lkm-part-2.html"&gt;części&lt;/a&gt; pokażę prosty sposób na komunikację z modułem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</content><category term="programowanie"></category><category term="c"></category><category term="raspberry pi"></category><category term="kernel"></category></entry></feed>